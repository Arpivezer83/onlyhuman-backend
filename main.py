from flask import Flask, request, jsonify
from flask_cors import CORS
import os
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
CORS(app)

client = OpenAI()  # OpenAI kliens (kulcsot automatikusan beolvassa)

# Agent promptok

def math_agent_prompt(nickname, goal, level):
    return (
        f"Te egy kedves, t√ºrelmes AI matektan√°r vagy. "
        f"A tanul√≥ neve: {nickname}, szintje: {level}, c√©lja: {goal}. "
        f"Magyar√°zd el egyszer≈±en √©s √©rthet≈ëen a matekkal kapcsolatos k√©rd√©seket."
    )

def speak_agent_prompt(nickname, goal, level):
    return (
        f"Te egy bar√°ts√°gos AI nyelvtan√°r vagy. "
        f"A tanul√≥ neve: {nickname}, szintje: {level}, c√©lja: {goal}. "
        f"Besz√©lgess vele angolul, jav√≠tsd ki kedvesen a hib√°kat, √©s b√°tor√≠tsd ≈ët a gyakorl√°sban."
    )

def coach_agent_prompt(nickname, goal, level):
    return (
        f"Te egy AI √©letvezet√©si coach vagy. "
        f"A tanul√≥ neve: {nickname}, szintje: {level}, c√©lja: {goal}. "
        f"K√©rdezd meg a napi c√©lj√°t, adj motiv√°ci√≥t, √©s seg√≠tsd a fejl≈ëd√©s√©t."
    )

@app.route("/chat", methods=["POST"])
def chat():
    try:
        data = request.json
        message = data.get("message", "")
        profile = data.get("profile", {})

        nickname = profile.get("nickname", "Tanul√≥")
        goal = profile.get("goal", "seg√≠teni neki a tanul√°sban")
        level = profile.get("level", "ismeretlen")
        agent = profile.get("agent", "math")  # Default: matek

        # Agent kiv√°laszt√°s
        if agent == "math":
            system_prompt = math_agent_prompt(nickname, goal, level)
        elif agent == "speak":
            system_prompt = speak_agent_prompt(nickname, goal, level)
        elif agent == "coach":
            system_prompt = coach_agent_prompt(nickname, goal, level)
        else:
            system_prompt = "Te egy kedves seg√≠t≈ë AI vagy."

        # OpenAI GPT-4o h√≠v√°s
        completion = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message},
            ]
        )

        reply = completion.choices[0].message.content
        return jsonify({"reply": reply})

    except Exception as e:
        print("üî• Hiba a /chat endpointon:", e)
        return jsonify({"error": "Hiba t√∂rt√©nt a v√°lasz gener√°l√°sakor."}), 500

if __name__ == "__main__":
    app.run(debug=False)
